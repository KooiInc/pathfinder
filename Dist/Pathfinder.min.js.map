{
  "version": 3,
  "sources": ["../src/PathFinder.js"],
  "sourcesContent": ["const addMethod2Prototype = await import(\"//kooiinc.github.io/ProtoXT/protoxt.js\").then(r => `default` in r ? r.default : r);\r\nconst cleanPath = path => /^[/.]/.test(path) ? path.slice(1) : path;\r\nconst splitPath = path => (cleanPath(path)).split(/[/.]/);\r\nconst isObj = o => Object.getPrototypeOf(o || 0).constructor === Object;\r\nconst checkArray = (shouldCheck, value) => shouldCheck && Array.isArray(value) && !!value.find(v => v.constructor && v.constructor === Object);\r\nconst noValue = `no value (undefined)`;\r\nconst invObj = `None. Object instance not suitable`;\r\nconst yn = addMethod2Prototype(Boolean, function() { return !this.valueOf() ? `NO` : `YES`; } );\r\nconst createReturnValue = (path = `n/a`, exists = false[yn], value = noValue) => ({searchPath: path, exists: exists[yn], value});\r\nconst validObj = obj => !Array.isArray(obj) && Object.keys(obj).length;\r\nconst extTo = (me, key) => validObj(me) && findPathForKey(me, key) || { searchKey: key, pathFound: invObj, value: `n/a`};\r\nconst extFrom = (me, path) => validObj(me) && getValueFromPath(me, path) || createReturnValue(path, false, `n/a`);\r\nconst pathTo = addMethod2Prototype(Object, extTo);\r\nconst fromPath = addMethod2Prototype(Object, extFrom)\r\n\r\nexport { pathTo, fromPath, };\r\n\r\nfunction getValueFromPath( object2Search, pathString, searchArraysForPathInObjects = false, returnFoundObjectFromArrayIfPathFoundWithin = false ) {\r\n  const iPath = splitPath(pathString);\r\n  const exists = currentObj => {\r\n    const current = iPath.shift();\r\n\r\n    if (checkArray(searchArraysForPathInObjects, currentObj[current])) {\r\n      const retrievedFromArray = currentObj[current]\r\n        .find(v => getValueFromPath(v, iPath.join(\"/\"), 1).exists);\r\n\r\n      return retrievedFromArray\r\n        ? returnFoundObjectFromArrayIfPathFoundWithin\r\n          ? createReturnValue(pathString, true, retrievedFromArray)\r\n          : getValueFromPath(retrievedFromArray, iPath.join(\"/\"), 1)\r\n        : createReturnValue(pathString, false);\r\n    }\r\n\r\n    return Object.hasOwn(currentObj, current) && iPath.length\r\n      ? exists(currentObj[current])\r\n      : { ...createReturnValue(pathString, current in currentObj, currentObj[current]),\r\n        setValue: value => currentObj[current] = value };\r\n  };\r\n\r\n  if (checkArray(searchArraysForPathInObjects, object2Search)) {\r\n    object2Search = {root: object2Search};\r\n  }\r\n  return exists(object2Search);\r\n}\r\n\r\nfunction findPathForKey(initialObj, key) {\r\n  let result = {\r\n    searchKey: key,\r\n    pathFound: false[yn],\r\n  };\r\n\r\n  function loop(obj, key, path = ``) {\r\n    for (let k of Object.keys(obj)) {\r\n      if (k !== key && isObj(obj[k])) {\r\n        loop( obj[k], key, `${path}.${k}` );\r\n      }\r\n\r\n      if (k === key) {\r\n        result.pathFound = `${path}.${key}`.replace(/^\\./, ``);\r\n        result.value = obj[k] === undefined && noValue || obj[k];\r\n        result.cloneWithNewValue = value => {\r\n          const cloned = window[`structuredClone`]\r\n            ? window[`structuredClone`](initialObj) : JSON.parse(JSON.stringify(initialObj));\r\n          const currentValue = getValueFromPath(cloned, result.pathFound);\r\n\r\n          if (Object.hasOwn(currentValue, `setValue`)) {\r\n            currentValue.setValue(value); // Note: by reference\r\n          }\r\n\r\n          return cloned;\r\n        };\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!Object.hasOwn(result, `value`)) { result.value = `No path for key '${key}'`; }\r\n\r\n    return result;\r\n  }\r\n\r\n  return loop(initialObj, key);\r\n}"],
  "mappings": "AAAA,GAAM,GAAsB,KAAM,QAAO,0CAA0C,KAAK,GAAK,WAAa,GAAI,EAAE,QAAU,CAAC,EACrH,EAAY,GAAQ,QAAQ,KAAK,CAAI,EAAI,EAAK,MAAM,CAAC,EAAI,EACzD,EAAY,GAAS,EAAU,CAAI,EAAG,MAAM,MAAM,EAClD,EAAQ,GAAK,OAAO,eAAe,GAAK,CAAC,EAAE,cAAgB,OAC3D,EAAa,CAAC,EAAa,IAAU,GAAe,MAAM,QAAQ,CAAK,GAAK,CAAC,CAAC,EAAM,KAAK,GAAK,EAAE,aAAe,EAAE,cAAgB,MAAM,EACvI,EAAU,uBACV,EAAS,qCACT,EAAK,EAAoB,QAAS,UAAW,CAAE,MAAO,AAAC,MAAK,QAAQ,EAAW,MAAP,IAAc,CAAE,EACxF,EAAoB,CAAC,EAAO,MAAO,EAAS,KAAM,GAAK,EAAQ,IAAa,EAAC,WAAY,EAAM,OAAQ,EAAO,GAAK,OAAK,GACxH,EAAW,GAAO,CAAC,MAAM,QAAQ,CAAG,GAAK,OAAO,KAAK,CAAG,EAAE,OAC1D,EAAQ,CAAC,EAAI,IAAQ,EAAS,CAAE,GAAK,EAAe,EAAI,CAAG,GAAK,CAAE,UAAW,EAAK,UAAW,EAAQ,MAAO,KAAK,EACjH,EAAU,CAAC,EAAI,IAAS,EAAS,CAAE,GAAK,EAAiB,EAAI,CAAI,GAAK,EAAkB,EAAM,GAAO,KAAK,EAC1G,EAAS,EAAoB,OAAQ,CAAK,EAC1C,EAAW,EAAoB,OAAQ,CAAO,EAIpD,WAA2B,EAAe,EAAY,EAA+B,GAAO,EAA8C,GAAQ,CAChJ,GAAM,GAAQ,EAAU,CAAU,EAC5B,EAAS,GAAc,CAC3B,GAAM,GAAU,EAAM,MAAM,EAE5B,GAAI,EAAW,EAA8B,EAAW,EAAQ,EAAG,CACjE,GAAM,GAAqB,EAAW,GACnC,KAAK,GAAK,EAAiB,EAAG,EAAM,KAAK,GAAG,EAAG,CAAC,EAAE,MAAM,EAE3D,MAAO,GACH,EACE,EAAkB,EAAY,GAAM,CAAkB,EACtD,EAAiB,EAAoB,EAAM,KAAK,GAAG,EAAG,CAAC,EACzD,EAAkB,EAAY,EAAK,CACzC,CAEA,MAAO,QAAO,OAAO,EAAY,CAAO,GAAK,EAAM,OAC/C,EAAO,EAAW,EAAQ,EAC1B,CAAE,GAAG,EAAkB,EAAY,IAAW,GAAY,EAAW,EAAQ,EAC7E,SAAU,GAAS,EAAW,GAAW,CAAM,CACrD,EAEA,MAAI,GAAW,EAA8B,CAAa,GACxD,GAAgB,CAAC,KAAM,CAAa,GAE/B,EAAO,CAAa,CAC7B,CAEA,WAAwB,EAAY,EAAK,CACvC,GAAI,GAAS,CACX,UAAW,EACX,UAAW,KAAM,EACnB,EAEA,WAAc,EAAK,EAAK,EAAO,GAAI,CACjC,OAAS,KAAK,QAAO,KAAK,CAAG,EAK3B,GAJI,IAAM,GAAO,EAAM,EAAI,EAAE,GAC3B,EAAM,EAAI,GAAI,EAAK,GAAG,KAAQ,GAAI,EAGhC,IAAM,EAAK,CACb,EAAO,UAAY,GAAG,KAAQ,IAAM,QAAQ,MAAO,EAAE,EACrD,EAAO,MAAQ,EAAI,KAAO,QAAa,GAAW,EAAI,GACtD,EAAO,kBAAoB,GAAS,CAClC,GAAM,GAAS,OAAO,gBAClB,OAAO,gBAAmB,CAAU,EAAI,KAAK,MAAM,KAAK,UAAU,CAAU,CAAC,EAC3E,EAAe,EAAiB,EAAQ,EAAO,SAAS,EAE9D,MAAI,QAAO,OAAO,EAAc,UAAU,GACxC,EAAa,SAAS,CAAK,EAGtB,CACT,EAEA,KACF,CAGF,MAAK,QAAO,OAAO,EAAQ,OAAO,GAAK,GAAO,MAAQ,oBAAoB,MAEnE,CACT,CAEA,MAAO,GAAK,EAAY,CAAG,CAC7B",
  "names": []
}
